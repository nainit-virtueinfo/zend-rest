<?php

/**
 * Model_UsersTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    zend-rest
 * @subpackage models
 * @author     Shashank Patel
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Model_UsersTable extends Doctrine_Table
{
    /**
    * @todo Execute getUserlist function for user listing.
    *
    * @return type array.
    */
    public static function getUserslist()
    {
        return Doctrine_Query::create()
                        ->select("U.*")
                        ->from("Model_Users U")
                        ->fetchArray();
    }

    /**
    * @todo Execute findUser function for find the particular user based on parameter.
    *
    * @param $snIdUser Integer	UserId.
    * @return type array or boolean.
    */
    public static function findUser($snIdUser)
    {
        if($snIdUser == "" || !is_numeric($snIdUser))
            return false;
        return Doctrine_Query::create()
                    ->select("U.*")
                    ->from("Model_Users U")
                    ->where("U.id_user = ?", $snIdUser)
                    ->fetchArray();
    }

    /**
    * @todo Execute deleteUser function for delete the particular user based on parameter.
    *
    * @param $snIdUser 	Integer	UserId.
    * @return type array or boolean.
    */
    public static function deleteUser($snIdUser)
    {
        if($snIdUser == "" || !is_numeric($snIdUser))
            return false;
        return Doctrine_Query::create()
                    ->delete("Model_Users U")
                    ->where("U.id_user = ?", $snIdUser)
                    ->execute();
    }

    /**
    * @todo Execute deleteUser function for delete the particular user based on parameter.
    *
    * @param $snIdUser 	Integer	UserId.
    * @return type array or boolean.
    */
    public static function updateUser($asFormValue)
    {
        if ($asFormValue == "" || !is_array($asFormValue))
            return false;
        return Doctrine_Query::create()
                    ->update("Model_Users u")
                    ->set("u.email", "?" ,$asFormValue['email'])
                    ->set("u.first_name", "?" , ucfirst($asFormValue['first_name']))
                    ->set("u.last_name", "?" , ucfirst($asFormValue['last_name']))
                    ->set("u.city", "?" , ucfirst($asFormValue['city']))
                    ->where("u.id_user = ?", $asFormValue['id_user'])
                    ->execute();
    }

    /**
     * Execute checkEmailExists to check email is exist or not.
     * @param $ssEmail Email address.
     * @return boolean.
     */
    public function checkEmailExist($ssEmail = '')
    {
        try
        {
            return Doctrine_Query::create()
                            ->select("MU.*")
                            ->from("Model_Users MU")
                            ->where("MU.email =?",$ssEmail)
                            ->fetchArray();
        }
        catch( Exception $e )
        {
            echo $e->getMessage();
            return false;
        }
    }

    /**
     * Execute getPassword to check password is exist or not.
     * @param $ssEmail Email address.
     * @return boolean.
     */
    public function getPassword($ssEmail)
    {
        try
        {
            return Doctrine_Query::create()
                            ->select("MU.password")
                            ->from("Model_Users MU")
                            ->where("MU.email =?",$ssEmail)
                            ->fetchArray();
        }
        catch( Exception $e )
        {
            echo $e->getMessage();
            return false;
        }
    }

    /**
     * Execute changePassword to check email is exist or not.
     * @param $ssEmail Email address.
     * @return boolean.
     */
    public function changePassword($asFormValue,$email)
    {
        try
        {
            return Doctrine_Query::create()
                        ->update("Model_Users u")
                        ->set("u.password", "md5(?)" ,$asFormValue['newpassword'])
                        ->where("u.email = ?", $email)
                        ->execute();
        }
        catch( Exception $e )
        {
            echo $e->getMessage();
            return false;
        }
    }
}